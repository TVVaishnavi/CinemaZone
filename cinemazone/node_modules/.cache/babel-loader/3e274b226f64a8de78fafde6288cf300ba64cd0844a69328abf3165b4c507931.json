{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vaishnavi\\\\OneDrive\\\\Desktop\\\\moviefrontend\\\\cinemazone\\\\src\\\\pages\\\\Search.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport useSearch from '../hooks/controller';\nimport '../style/search.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Search() {\n  _s();\n  const {\n    SearchTheatre,\n    SearchMovie\n  } = useSearch();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchingForMovie, setIsSearchingForMovie] = useState(false);\n  const [isSearchingForTheatre, setIsSearchingForTheatre] = useState(false);\n  const handleTheatreSearch = () => {\n    if (searchQuery.trim() === '') {\n      alert(\"Enter a theatre name to search!\");\n      return;\n    }\n    SearchTheatre({\n      theatreName: searchQuery\n    });\n  };\n  const handleMovieSearch = async () => {\n    var _movieData$theatres;\n    if (searchQuery.trim() === '') {\n      alert(\"Enter a movie name to search!\");\n      return;\n    }\n    const movieData = await SearchMovie({\n      title: searchQuery\n    });\n\n    // ✅ Ensure the movie has theatres before making a theatre search\n    if ((movieData === null || movieData === void 0 ? void 0 : (_movieData$theatres = movieData.theatres) === null || _movieData$theatres === void 0 ? void 0 : _movieData$theatres.length) > 0) {\n      SearchTheatre({\n        theatreName: movieData.theatres[0].name\n      }); // Send only the first theatre name\n    }\n  };\n  const handleSearch = async () => {\n    if (isSearchingForMovie) {\n      await handleMovieSearch(); // Wait for movie data before searching for theatres\n    } else if (isSearchingForTheatre) {\n      handleTheatreSearch();\n    } else {\n      await handleMovieSearch(); // First, search for the movie\n      if (isSearchingForTheatre) {\n        handleTheatreSearch(); // Search for theatre only if needed\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Search for Theatre or Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter movie name\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"oLK0NhNwOgfGf5S4211Fu7IcmDg=\", false, function () {\n  return [useSearch];\n});\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useSearch","jsxDEV","_jsxDEV","Search","_s","SearchTheatre","SearchMovie","searchQuery","setSearchQuery","isSearchingForMovie","setIsSearchingForMovie","isSearchingForTheatre","setIsSearchingForTheatre","handleTheatreSearch","trim","alert","theatreName","handleMovieSearch","_movieData$theatres","movieData","title","theatres","length","name","handleSearch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Vaishnavi/OneDrive/Desktop/moviefrontend/cinemazone/src/pages/Search.js"],"sourcesContent":["import React, {useState} from 'react'\r\nimport useSearch from '../hooks/controller'\r\nimport '../style/search.css'\r\n\r\nfunction Search() {\r\n    const {SearchTheatre, SearchMovie} = useSearch()\r\n    const [searchQuery, setSearchQuery] = useState('')\r\n    const [isSearchingForMovie, setIsSearchingForMovie] = useState(false);\r\n    const [isSearchingForTheatre, setIsSearchingForTheatre] = useState(false);\r\n\r\n    const handleTheatreSearch = () => {\r\n        if (searchQuery.trim() === '') {\r\n            alert(\"Enter a theatre name to search!\");\r\n            return;\r\n        }\r\n        SearchTheatre({ theatreName: searchQuery });\r\n    };\r\n    \r\n    const handleMovieSearch = async () => { \r\n        if (searchQuery.trim() === '') {\r\n            alert(\"Enter a movie name to search!\");\r\n            return;\r\n        }\r\n        const movieData = await SearchMovie({ title: searchQuery });\r\n    \r\n        // ✅ Ensure the movie has theatres before making a theatre search\r\n        if (movieData?.theatres?.length > 0) {\r\n            SearchTheatre({ theatreName: movieData.theatres[0].name }); // Send only the first theatre name\r\n        }\r\n    };\r\n    \r\n    const handleSearch = async () => {\r\n        if (isSearchingForMovie) {  \r\n            await handleMovieSearch(); // Wait for movie data before searching for theatres\r\n        } else if (isSearchingForTheatre) {  \r\n            handleTheatreSearch();\r\n        } else {  \r\n            await handleMovieSearch(); // First, search for the movie\r\n            if (isSearchingForTheatre) {\r\n                handleTheatreSearch(); // Search for theatre only if needed\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n  return (\r\n    <div className='search-container'>\r\n        <h2>Search for Theatre or Movie</h2>\r\n        <input type='text' placeholder='Enter movie name' value={searchQuery} onChange={(e)=>setSearchQuery(e.target.value)}/>\r\n        <button onClick={handleSearch}>Search</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}