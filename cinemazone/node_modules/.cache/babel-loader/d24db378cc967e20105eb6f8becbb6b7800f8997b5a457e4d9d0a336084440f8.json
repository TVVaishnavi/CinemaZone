{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vaishnavi\\\\OneDrive\\\\Desktop\\\\moviefrontend\\\\cinemazone\\\\src\\\\pages\\\\TheatreSelect.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\"; // ✅ React hooks imported\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TheatreSelect = () => {\n  _s();\n  const {\n    title\n  } = useParams(); // ✅ Extracting movie title from URL\n  const [theatres, setTheatres] = useState([]); // ✅ State to store theatres\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // ✅ useEffect is the hook responsible for fetching theatres\n  useEffect(() => {\n    const fetchTheatres = async () => {\n      try {\n        console.log(\"Fetching theatres for:\", title); // ✅ Debugging log\n        const response = await fetch(`http://localhost:00/api/movies/${title}/theatres`);\n        console.log(\"Response status:\", response.status); // ✅ Check response status\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Fetched data:\", data); // ✅ Log fetched data\n        setTheatres(data.theatres);\n      } catch (err) {\n        console.error(\"Error fetching theatres:\", err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTheatres();\n  }, [title]);\n\n  // ✅ UI handling\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading theatres...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Available Theatres for \", title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), theatres.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: theatres.map((theatre, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: theatre\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No theatres available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TheatreSelect, \"hlFru6nGkaVC8I2p0bbKLuXAbFA=\", false, function () {\n  return [useParams];\n});\n_c = TheatreSelect;\nexport default TheatreSelect;\nvar _c;\n$RefreshReg$(_c, \"TheatreSelect\");","map":{"version":3,"names":["useEffect","useState","useParams","jsxDEV","_jsxDEV","TheatreSelect","_s","title","theatres","setTheatres","loading","setLoading","error","setError","fetchTheatres","console","log","response","fetch","status","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","theatre","index","_c","$RefreshReg$"],"sources":["C:/Users/Vaishnavi/OneDrive/Desktop/moviefrontend/cinemazone/src/pages/TheatreSelect.js"],"sourcesContent":["import { useEffect, useState } from \"react\";  // ✅ React hooks imported\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst TheatreSelect = () => {\r\n  const { title } = useParams();  // ✅ Extracting movie title from URL\r\n  const [theatres, setTheatres] = useState([]);  // ✅ State to store theatres\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // ✅ useEffect is the hook responsible for fetching theatres\r\n  useEffect(() => {\r\n    const fetchTheatres = async () => {\r\n      try {\r\n        console.log(\"Fetching theatres for:\", title);  // ✅ Debugging log\r\n        const response = await fetch(`http://localhost:00/api/movies/${title}/theatres`);\r\n        console.log(\"Response status:\", response.status);  // ✅ Check response status\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log(\"Fetched data:\", data);  // ✅ Log fetched data\r\n        setTheatres(data.theatres);\r\n      } catch (err) {\r\n        console.error(\"Error fetching theatres:\", err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    fetchTheatres();\r\n  }, [title]);\r\n  \r\n  // ✅ UI handling\r\n  if (loading) return <p>Loading theatres...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Available Theatres for {title}</h2>\r\n      {theatres.length > 0 ? (\r\n        <ul>\r\n          {theatres.map((theatre, index) => (\r\n            <li key={index}>{theatre}</li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No theatres available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TheatreSelect;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}